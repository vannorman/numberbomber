var levels = {
    '-1' : { // Hacky daily shuffle index
         deck : GameBoard.GetDailyShuffle(),
        iced : [],
        swaps : 0,
        lives : 5,
        boardSize : { rows : 4, cols : 4 },
        tip : "Spark a factor to start a chain reaction in neighbor tiles with that factor.",   
        minimumMoves : 6,       
    },
    0 : {
        deck : Array.from({ length: 16 }, (_, i) => i + 1).sort(() => Math.random() - 0.5) ,
        iced : [],
        swaps : 0,
        lives : 5,
        boardSize : { rows : 3, cols : 3 },
        tip : "Only numbers that match your chosen factor will explode.",   
        minimumMoves : 6,       
        },
     1 : {
        deck : Array.from({ length: 25 }, (_, i) => i + 1).sort(() => Math.random() - 0.5),
        iced : [],
        swaps : 0,
        lives : 5,
        boardSize : { rows : 3, cols : 3 },
        tip : "Prime numbers explode other prime numbers.", 
        minimumMoves : 8,
    },
     2 :{
        deck : Array.from({ length: 36 }, (_, i) => i + 1).sort(() => Math.random() - 0.5) ,
        iced : [],
        swaps : 0,
        lives : 5,
        boardSize : { rows : 3, cols : 3 },
        tip : "Watch your energy. If you spark a tile by itself, you lose energy.",
        tipGraphic : "/static/img/iconEnergy.png", 
        minimumMoves : 12,
    },
     3 :{
        deck : Array.from({ length: 49 }, (_, i) => i + 1).sort(() => Math.random() - 0.5),
        iced : [],
        swaps : 0,
        lives : 5,
        boardSize : { rows : 4, cols : 4 },
        tip : "Hold down your finger or mouse on a factor to preview it.",
        minimumMoves : 14,
    },
     4: {
        deck : Array.from({ length: 64 }, (_, i) => i + 1).sort(() => Math.random() - 0.5),
        iced : [],
        swaps : 2,
        lives : 5,
        boardSize : { rows : 5, cols : 5 },
        minimumMoves : 20,
        tip : "Hold down your finger or mouse on a factor to preview the chain reaction it will cause!",
    },
    5: {
        deck : Array.from({ length: 81 }, (_, i) => i + 1).sort(() => Math.random() - 0.5),
        iced : [],
        swaps : 2,
        lives : 5,
        boardSize : { rows : 5, cols : 5 },
        tip : "Use a SWAP to swap the location of a number with a neighbor",
        tipGraphic : "/static/img/iconSwap.png",
        minimumMoves : 20,
        tip : "Hold down your finger or mouse on a factor to preview the chain reaction it will cause!",
    },
    6: {
        deck : Array.from({ length: 100 }, (_, i) => i + 1).sort(() => Math.random() - 0.5),
        iced : [],
        swaps : 2,
        lives : 5,
        boardSize : { rows : 6, cols : 6 },
        minimumMoves : 20,
        tip : "Hold down your finger or mouse on a factor to preview the chain reaction it will cause!",
    },
    7: {
        deck : [
                4, 4, 4,
                6, 6, 6,
                9, 9, 9
                ],
        iced : [],
        swaps : 0,
        lives : 1,
        boardSize : { rows : 3, cols : 3 },
        tip : "Use fewer moves to maximize your score!",
        minimumMoves : 2,
    },
    8: {
//            deck : [...Array(18).keys()].filter(x => x > 1).map(x => [x,x]).flat(), //.concat([...Array(18).keys()].filter(x => x > 1)),
//            deck : [ 4, 4, 4, 4, 4, Card.Rock, Card.Rock, 9, 9, Card.Rock, Card.Rock, 9, 9, 9, 9, 4],
        deck : [   
                    2,  Card.Rock, 3,
                    4, Card.Rock,  6,
                    6,  Card.Rock,  9,
                    ],
        iced : [],
        swaps : 0,
        lives : 1,
        boardSize : { rows : 3, cols : 3 },
        tip : "Rocks can't be exploded; you need to work around them.",
        minimumMoves : 2,
    },
     9: {
        deck : [
                3,6,9,
                Card.Rock,Card.Rock,12,
                21,18,15,
                ],
        iced : [],
        swaps : 0,
        lives : 4,
        boardSize : { rows : 3, cols : 3},
        tip : "Rocks can't be exploded; you need to work around them.",
        minimumMoves : 3,
    },
     10: {
        deck : [ 
                 9, 9, 9, 4,
                 9, Card.Rock, Card.Rock, 9, 
                 4, Card.Rock, Card.Rock, 9, 
                 4, 4, 4, 4, 
                 ],
//            deck : [...Array(64).keys()].filter(x => x > 1),
        iced : [],
        swaps : 0,
        lives : 4,
        boardSize : { rows : 4, cols : 4 },
        tip : "Rocks can't be exploded; you need to work around them.",
        minimumMoves : 3,
    },  
    11:{
        deck : [
                8, 12, 8,
                8, 12, 8,
                4, 12, 4,
                ],
       iced : [12,12,12], 
        swaps : 0,
        lives : 4,
        boardSize : { rows : 3, cols : 3 },
        tip : "Iced numbers react to a spark from a common factor breaking the ice a little. Spark the number twice to remove the ice!",
        minimumMoves : 3,
    },12:  {
        deck : [
                Card.Rock, 25, Card.Rock,
                Card.Rock, 15, Card.Rock,
                9, 30, 9,
                ],
       iced : [15], 
        swaps : 0,
        lives : 1,
        boardSize : { rows : 3, cols : 3 },
        tip : "Watch your energy. If you spark a tile by itself, you lose energy.",
        tipGraphic : "/static/img/iconEnergy.png",
        minimumMoves : 3,
    }, 13: {
        deck : [
                Card.Rock, 6, 9,
                6,  Card.Rock, 12,
                4, 2, Card.Rock,
                ],
        iced : [],
        swaps : 0,
        lives : 1,
        boardSize : { rows : 3, cols : 3},
     }, 14: {
        deck : [
                2, 4, 6,
                3, 6, 9,
                5, 10, 15,
                ],
        iced : [6 ],
        swaps : 0,
        lives : 1,
        boardSize : { rows : 3, cols : 3},
    },  15:{
        deck : [
                2, 4, 6, 8,
                Card.Rock, Card.Rock, Card.Rock, 10,
                22, Card.Rock, Card.Rock, 12,
                20, 18, 16, 14,
                ],
        iced : [],
        swaps : 0,
        lives : 1,
        boardSize : { rows : 4, cols : 4 },
    },  16:{
        deck : [
                11, 4, 23,
                10, 13, 8,
                12, 14, 17,
                ],
        iced : [],
        swaps : 0,
        lives : 1,
        boardSize : { rows : 3, cols : 3},
        tip : "Spark wisely, order matters sometimes...",
        minimumMoves : 3,
    },  17:{
        deck : [
               Card.Rock, 3, 6, 5,
                6, Card.Rock, 15, 9,	
                12, 21, Card.Rock, 12,
                18, 42, 7, Card.Rock,
                ],
        iced : [],
        deck : [...Array(20).keys()].filter(x => x > 1),
        swaps : 0,
        lives : 2,
        boardSize : { rows : 4, cols : 4},
        tip : "Choose your first spark wisely.",
        minimumMoves : 4,
    }, 18:{
        deck : [
                7, 14, 10, 10,
                10, 21, 28, 10,	
                10, 10, 35, 42,
                10, 10, 10, 49,
                ],
        iced : [],
        swaps : 0,
        lives : 1,
        boardSize : { rows : 4, cols : 4},
    },
   19:{
        deck : [
                    Card.Rock, 3, Card.Rock,
                6, Card.Rock, 15,    
                Card.Rock, 21, Card.Rock
                ],
        iced : [],
        swaps : 1,
        lives : 1,
        boardSize : { rows : 3, cols : 3},
        tip : "You need to use the SWAP  button for this level.",
        tipGraphic : "/static/img/iconSwap.png"
    },
     20:{
        deck : [
                Card.Rock, 3, Card.Rock, 2,
                6, Card.Rock, 4, Card.Rock,  
                Card.Rock, 21, Card.Rock, 8,
                 27, Card.Rock, 16, Card.Rock,
                ],
        iced : [],
        swaps : 3,
        lives : 2,
        boardSize : { rows : 4, cols : 4},
    },
     21:{
        deck : [
               Card.Rock, 3, 4, 6,
                6, Card.Rock, 15, 9,	
                12, 21, Card.Rock, 12,
                18, 28, 7, Card.Rock,
                ],
        iced : [15,21],
        swaps : 0,
        lives : 2,
        boardSize : { rows : 4, cols : 4},
    },
}

GameManager.levels = levels; //hacky dependency loop avoider 
